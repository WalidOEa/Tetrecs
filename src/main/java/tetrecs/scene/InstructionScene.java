package tetrecs.scene;

import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.image.ImageView;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.text.Text;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import tetrecs.component.PieceBoard;
import tetrecs.game.GamePiece;
import tetrecs.ui.GamePane;
import tetrecs.ui.GameWindow;

import java.util.ArrayList;
import java.util.Objects;
import java.util.Random;

/**
 * The instruction scene provides instructions on playing the game. These included the rules and controls. Furthermore,
 * a visual representation of each block is generated randomly both in type and rotation.
 */
public class InstructionScene extends BaseScene {

    private final Logger logger = LogManager.getLogger(InstructionScene.class);

    /**
     * Generates randomPieces from GamePiece
     */
    private final Random randomPiece = new Random();

    /**
     * Provides a random rotation to each piece
     */
    private final Random randomRotation = new Random();

    /**
     * Contains all pieces that have so far been generated by Game
     */
    private final ArrayList<Integer> pieces = new ArrayList<>();

    /**
     * Creates a new instruction scene.
     * @param gameWindow the Game Window this will be displayed in
     */
    public InstructionScene(GameWindow gameWindow) {
        super(gameWindow);
        logger.info("Creating Instruction Scene");
    }

    /**
     * Build the instruction UI.
     */
    @Override
    public void build() {
        logger.info("Building " + this.getClass().getName());

        root = new GamePane(gameWindow.getWidth(), gameWindow.getHeight());

        var instructionPane = new BorderPane();
        instructionPane.setMaxWidth(gameWindow.getWidth());
        instructionPane.setMaxHeight(gameWindow.getHeight());
        instructionPane.getStyleClass().add("menu-background");
        root.getChildren().add(instructionPane);

        // Instructions
        var instructionsVBox = new VBox();

        var instructionsTitle = new Text("Instructions");
        instructionsTitle.getStyleClass().add("title");
        instructionsVBox.getChildren().add(instructionsTitle);

        var instructions = new ImageView(Objects.requireNonNull(this.getClass().getResource("/images/Instructions.png")).toExternalForm());
        instructions.setFitHeight(gameWindow.getWidth() - 450);
        instructions.setFitWidth(gameWindow.getWidth() - 200);
        instructionsVBox.getChildren().add(instructions);
        instructionsVBox.setAlignment(Pos.TOP_CENTER);
        instructionPane.setTop(instructionsVBox);

        // Piece blocks
        var pieceRows = new VBox(15);

        // First row of blocks
        var pieceRow1 = new HBox(25);
        for (int i = 0; i < 8; i++) {
            addPiece(pieceRow1);
        }
        pieceRow1.setAlignment(Pos.TOP_CENTER);
        pieceRows.getChildren().add(pieceRow1);

        // Second row
        var pieceRow2 = new HBox(30);
        for (int i = 0; i < 7; i++) {
            addPiece(pieceRow2);
        }
        pieceRow2.setAlignment(Pos.CENTER);
        pieceRows.getChildren().add(pieceRow2);
        BorderPane.setMargin(pieceRows, new Insets(25, 25, 25, 25));
        instructionPane.setBottom(pieceRows);
    }

    /**
     * Adds pieces to pieceBoard and displays them.
     * @param pieceRow horizontal box to consisting of pieceBoard to add pieces to
     */
    private void addPiece(HBox pieceRow) {
        int j = randomPiece.nextInt(15);

        if (pieces.contains(j)) {
            while (pieces.contains(j)) {
                // Randomise until number is not in arrayList
                j = randomPiece.nextInt(15);
            }
        }

        PieceBoard pieceBoard = new PieceBoard(3, 3, 65, 65);
        pieceBoard.displayPiece(GamePiece.createPiece(j, randomRotation.nextInt(4)));
        pieceRow.getChildren().add(pieceBoard);
        pieces.add(j);
    }

    /**
     * Initialise the instruction scene and adds event handlers that lead back to the main menu.
     */
    @Override
    public void initialise() {
        logger.info("Initialising Instructions");

        scene.addEventHandler(KeyEvent.KEY_PRESSED, (key) -> {
            if (key.getCode() == KeyCode.ESCAPE ) {
                gameWindow.cleanup();
                gameWindow.startMenu();
            }
        });

        Multimedia.playBackgroundMusic("menu.mp3");
    }
}
